/* OUTPUT_FORMAT("elf32-h8300") */
OUTPUT_ARCH(h8300h)
ENTRY("_start")

/**
 * o ROM
 *   0x000000 +---------------------------+ ---
 *            |                           | 'vectors' (256B)
 *            |                           | --- 0x000100
 *            |                           |
 *    romall  |                           | 'rom' (511.5KB)
 *    (512KB) |                           |
 *            |                           | --- 0x07ff00
 *            |                           | mergin (256B)
 *   0x080000 +---------------------------+
 *
 * o RAM
 *   0xffbf20 +---------------------------+ ---
 *            |                           | 'softvec' (64B)
 *            |                           | --- 0xffbf60
 *            |                           |
 *    ramall  |                           | --- 0xffdf20
 *    (16KB)  |                           | 'buffer' (7.25KB)
 *            |                           | --- 0xfffc20
 *            |                           | 'data' (736B)
 *            |                           | --- 0xffff00 //'bootstack' and 'intrstack'
 *            |                           | mergin (32B)
 *   0xffff20 +---------------------------+
 */

MEMORY
{
        romall(rx)      : o = 0x000000, l = 0x080000 /* 512KB                        */
        vectors(r)      : o = 0x000000, l = 0x000100 /* top of ROM                   */
        rom(rx)         : o = 0x000100, l = 0x07ff00

        ramall(rwx)     : o = 0xffbf20, l = 0x004000 /* 16KB                         */
        softvec(rw)     : o = 0xffbf20, l = 0x000040 /*  64B                         */
        buffer(rwx)     : o = 0xffdf20, l = 0x001d00 /*  7.25KB                      */
        data(rwx)       : o = 0xfffc20, l = 0x000300 /* 768B (actually size is 736B) */
        bootstack(rw)   : o = 0xffff00, l = 0x000000
        intrstack(rw)   : o = 0xffff00, l = 0x000000 /* end of RAM                   */
}

SECTIONS
{
        .vectors : {
                 vector.o(.data)
        } > vectors

        .text    : {
                 _text_start = . ;
                 *(.text)
                 _etext = . ;
        } > rom

        .rodata  : {
                 _rodata_start = . ;
                 *(.strings)
                 *(.rodata)
                 *(.rodata.*)
                 _erodata = . ;
        } > rom

        .softvec : {
                 _softvec = . ;
        } > softvec
        
        .buffer  : {
                 _buffer_start = . ;
        } > buffer
        
        .data    : {
                 _data_start = . ;
                 *(.data)
                 _edata = . ;
        } > data AT> rom

        .bss     : {
                 _bss_start = . ;
                 *(.bss)
                 *(COMMON)
                 _ebss = . ;
        } > data AT> rom

        . = ALIGN(4); /* align 4 byte location counter */
        _end = . ;

        .bootstack : {
               _bootstack = . ;
        } > bootstack
        
        .intrstack : {
               _intrstack = . ;
        } > intrstack
}
